========================================
GU√çA PASO A PASO: CONFIGURACI√ìN DJANGO ADMIN
SISTEMA CRM UNIVERSITARIO
========================================

üìã √çNDICE:
1. Configuraci√≥n del archivo admin.py
2. Crear superusuario (si no existe)
3. Manejo de migraciones
4. Iniciar servidor y acceder al admin
5. Funcionalidades incluidas
6. Personalizaci√≥n adicional

========================================
PASO 1: CONFIGURAR EL ARCHIVO admin.py
========================================

Ubicaci√≥n del archivo:
- Ruta: AppCRM/admin.py

Contenido completo (reemplazar todo el contenido existente):

---INICIO DEL C√ìDIGO---
from django.contrib import admin
from django.db.models import Count, Avg
from django.utils.html import format_html
from .models import (
    Usuario, Administrador, Docente, Estudiante,
    MateriaClase, Clase, Inscripcion, Calificacion, Pago
)


# ========================================
# CONFIGURACI√ìN PARA USUARIO
# ========================================

@admin.register(Usuario)
class UsuarioAdmin(admin.ModelAdmin):
    list_display = [
        'id_usuario', 'nombre', 'email', 'rol', 
        'edad_display', 'esta_activo', 'fecha_creacion'
    ]
    list_filter = ['rol', 'esta_activo', 'fecha_creacion']
    search_fields = ['nombre', 'email']
    ordering = ['nombre']
    list_per_page = 25
    
    fieldsets = (
        ('Informaci√≥n Personal', {
            'fields': ('nombre', 'email', 'fecha_nacimiento')
        }),
        ('Credenciales', {
            'fields': ('password_hash', 'rol'),
            'classes': ('collapse',)
        }),
        ('Estado', {
            'fields': ('esta_activo',)
        })
    )
    
    def edad_display(self, obj):
        """Muestra la edad calculada"""
        return f"{obj.edad} a√±os"
    edad_display.short_description = 'Edad'
    
    def get_queryset(self, request):
        """Optimiza las consultas"""
        return super().get_queryset(request).select_related()


# ========================================
# CONFIGURACI√ìN PARA ADMINISTRADOR
# ========================================

@admin.register(Administrador)
class AdministradorAdmin(admin.ModelAdmin):
    list_display = ['id_admin', 'usuario', 'puesto', 'nivel_acceso']
    list_filter = ['nivel_acceso', 'puesto']
    search_fields = ['usuario__nombre', 'puesto']
    raw_id_fields = ['usuario']
    
    fieldsets = (
        ('Informaci√≥n del Administrador', {
            'fields': ('usuario', 'puesto', 'nivel_acceso')
        }),
    )


# ========================================
# CONFIGURACI√ìN PARA DOCENTE
# ========================================

@admin.register(Docente)
class DocenteAdmin(admin.ModelAdmin):
    list_display = [
        'id_docente', 'nombre_docente', 'departamento', 
        'especialidad', 'clases_count', 'fecha_ingreso'
    ]
    list_filter = ['departamento', 'especialidad', 'fecha_ingreso']
    search_fields = ['nombre_docente', 'departamento', 'especialidad']
    raw_id_fields = ['usuario']
    
    fieldsets = (
        ('Informaci√≥n del Docente', {
            'fields': ('usuario', 'nombre_docente')
        }),
        ('Informaci√≥n Acad√©mica', {
            'fields': ('departamento', 'especialidad', 'fecha_ingreso')
        })
    )
    
    def clases_count(self, obj):
        """Cuenta las clases asignadas al docente"""
        return obj.clases_asignadas.count()
    clases_count.short_description = 'Clases Asignadas'
    
    def get_queryset(self, request):
        return super().get_queryset(request).prefetch_related('clases_asignadas')


# ========================================
# CONFIGURACI√ìN PARA ESTUDIANTE
# ========================================

@admin.register(Estudiante)
class EstudianteAdmin(admin.ModelAdmin):
    list_display = [
        'id_estudiante', 'usuario', 'matricula', 
        'carrera', 'semestre_actual', 'inscripciones_count'
    ]
    list_filter = ['carrera', 'semestre_actual', 'fecha_ingreso']
    search_fields = ['usuario__nombre', 'matricula', 'carrera']
    raw_id_fields = ['usuario']
    
    fieldsets = (
        ('Informaci√≥n del Estudiante', {
            'fields': ('usuario', 'matricula')
        }),
        ('Informaci√≥n Acad√©mica', {
            'fields': ('carrera', 'semestre_actual')
        })
    )
    
    def inscripciones_count(self, obj):
        """Cuenta las inscripciones del estudiante"""
        return obj.usuario.inscripciones.count()
    inscripciones_count.short_description = 'Inscripciones'


# ========================================
# CONFIGURACI√ìN PARA MATERIA
# ========================================

@admin.register(MateriaClase)
class MateriaClaseAdmin(admin.ModelAdmin):
    list_display = [
        'id_materia', 'codigo_materia', 'nombre_materia', 
        'creditos', 'clases_count'
    ]
    list_filter = ['creditos']
    search_fields = ['nombre_materia', 'codigo_materia']
    ordering = ['codigo_materia']
    
    fieldsets = (
        ('Informaci√≥n de la Materia', {
            'fields': ('codigo_materia', 'nombre_materia', 'creditos')
        }),
        ('Descripci√≥n', {
            'fields': ('descripcion',),
            'classes': ('collapse',)
        })
    )
    
    def clases_count(self, obj):
        """Cuenta las clases de esta materia"""
        return obj.clases.count()
    clases_count.short_description = 'Clases Disponibles'


# ========================================
# CONFIGURACI√ìN PARA CLASE
# ========================================

@admin.register(Clase)
class ClaseAdmin(admin.ModelAdmin):
    list_display = [
        'id_clase', 'materia', 'docente', 'horario', 
        'aula_clase', 'estudiantes_inscritos_display', 
        'cupo_disponible', 'periodo_academico'
    ]
    list_filter = ['periodo_academico', 'materia', 'docente']
    search_fields = ['materia__nombre_materia', 'docente__nombre_docente', 'aula_clase']
    raw_id_fields = ['materia', 'docente']
    
    fieldsets = (
        ('Informaci√≥n de la Clase', {
            'fields': ('materia', 'docente')
        }),
        ('Horario y Ubicaci√≥n', {
            'fields': ('horario', 'aula_clase')
        }),
        ('Configuraci√≥n', {
            'fields': ('cupo_maximo', 'periodo_academico')
        })
    )
    
    def estudiantes_inscritos_display(self, obj):
        """Muestra estudiantes inscritos con color"""
        count = obj.estudiantes_inscritos
        if count >= obj.cupo_maximo:
            color = 'red'
        elif count >= obj.cupo_maximo * 0.8:
            color = 'orange'
        else:
            color = 'green'
        return format_html(
            '<span style="color: {};">{}</span>',
            color, count
        )
    estudiantes_inscritos_display.short_description = 'Estudiantes Inscritos'
    
    def cupo_disponible(self, obj):
        """Muestra cupo disponible"""
        disponible = obj.cupo_maximo - obj.estudiantes_inscritos
        return f"{disponible}/{obj.cupo_maximo}"
    cupo_disponible.short_description = 'Cupo Disponible'


# ========================================
# CONFIGURACI√ìN PARA INSCRIPCI√ìN
# ========================================

@admin.register(Inscripcion)
class InscripcionAdmin(admin.ModelAdmin):
    list_display = [
        'id_inscripcion', 'estudiante', 'clase', 
        'estado', 'fecha_inscripcion'
    ]
    list_filter = ['estado', 'fecha_inscripcion', 'clase__periodo_academico']
    search_fields = [
        'estudiante__nombre', 'clase__materia__nombre_materia'
    ]
    raw_id_fields = ['estudiante', 'clase']
    date_hierarchy = 'fecha_inscripcion'
    
    fieldsets = (
        ('Informaci√≥n de Inscripci√≥n', {
            'fields': ('estudiante', 'clase', 'estado')
        }),
    )


# ========================================
# CONFIGURACI√ìN PARA CALIFICACI√ìN
# ========================================

@admin.register(Calificacion)
class CalificacionAdmin(admin.ModelAdmin):
    list_display = [
        'id_calificacion', 'estudiante', 'clase', 
        'nota_display', 'tipo_evaluacion', 'fecha_evaluacion'
    ]
    list_filter = [
        'tipo_evaluacion', 'fecha_evaluacion', 
        'clase__materia', 'clase__periodo_academico'
    ]
    search_fields = [
        'estudiante__nombre', 'clase__materia__nombre_materia'
    ]
    raw_id_fields = ['estudiante', 'clase']
    date_hierarchy = 'fecha_evaluacion'
    
    fieldsets = (
        ('Informaci√≥n de Calificaci√≥n', {
            'fields': ('estudiante', 'clase')
        }),
        ('Evaluaci√≥n', {
            'fields': ('tipo_evaluacion', 'nota', 'observaciones')
        })
    )
    
    def nota_display(self, obj):
        """Muestra la nota con color seg√∫n aprobaci√≥n"""
        color = 'green' if obj.aprobado else 'red'
        status = '‚úì Aprobado' if obj.aprobado else '‚úó Reprobado'
        return format_html(
            '<span style="color: {};">{} ({})</span>',
            color, obj.nota, status
        )
    nota_display.short_description = 'Calificaci√≥n'


# ========================================
# CONFIGURACI√ìN PARA PAGO
# ========================================

@admin.register(Pago)
class PagoAdmin(admin.ModelAdmin):
    list_display = [
        'estudiante', 'id_transaccion', 'monto_display', 
        'estado_pago_display', 'metodo_pago', 'fecha_pago'
    ]
    list_filter = [
        'estado_pago', 'metodo_pago', 'moneda', 
        'fecha_pago', 'fecha_vencimiento'
    ]
    search_fields = [
        'estudiante__usuario__nombre', 'id_transaccion'
    ]
    date_hierarchy = 'fecha_pago'
    
    fieldsets = (
        ('Informaci√≥n del Pago', {
            'fields': ('estudiante', 'id_transaccion')
        }),
        ('Detalles del Pago', {
            'fields': ('monto', 'moneda', 'metodo_pago', 'descripcion')
        }),
        ('Estado y Fechas', {
            'fields': ('estado_pago', 'fecha_vencimiento')
        })
    )
    
    def monto_display(self, obj):
        """Muestra el monto formateado"""
        return f"{obj.moneda} ${obj.monto:,.2f}"
    monto_display.short_description = 'Monto'
    
    def estado_pago_display(self, obj):
        """Muestra el estado con color"""
        colors = {
            'completado': 'green',
            'pendiente': 'orange',
            'fallido': 'red',
            'reembolsado': 'blue'
        }
        color = colors.get(obj.estado_pago, 'black')
        return format_html(
            '<span style="color: {};">{}</span>',
            color, obj.get_estado_pago_display()
        )
    estado_pago_display.short_description = 'Estado'


# ========================================
# PERSONALIZACI√ìN DEL ADMIN PRINCIPAL
# ========================================

# Personalizar el t√≠tulo del admin
admin.site.site_header = "CRM Universitario - Administraci√≥n"
admin.site.site_title = "CRM Universitario"
admin.site.index_title = "Panel de Administraci√≥n del Sistema CRM"
---FIN DEL C√ìDIGO---

========================================
PASO 2: CREAR SUPERUSUARIO (SI NO EXISTE)
========================================

Comando en terminal:
python manage.py createsuperuser

Informaci√≥n requerida:
- Username: [tu_usuario]
- Email: [tu_email]
- Password: [tu_contrase√±a]

========================================
PASO 3: MANEJO DE MIGRACIONES
========================================

**Si las tablas YA EXISTEN en la base de datos:**

1. Crear migraciones:
   python manage.py makemigrations AppCRM

2. Aplicar migraciones como "fake" (simular que ya est√°n aplicadas):
   python manage.py migrate AppCRM --fake

3. Aplicar el resto de migraciones de Django:
   python manage.py migrate

**Si las tablas NO EXISTEN:**

1. Crear migraciones:
   python manage.py makemigrations

2. Aplicar migraciones:
   python manage.py migrate

========================================
PASO 4: INICIAR SERVIDOR Y ACCEDER AL ADMIN
========================================

1. Iniciar servidor:
   python manage.py runserver

2. Acceder al admin:
   URL: http://127.0.0.1:8000/admin/
   O: http://localhost:8000/admin/

3. Iniciar sesi√≥n con tu superusuario

========================================
FUNCIONALIDADES INCLUIDAS
========================================

‚úÖ CARACTER√çSTICAS DEL ADMIN CONFIGURADO:

üìä LISTAS DE OBJETOS:
- Filtros por m√∫ltiples campos
- B√∫squeda avanzada
- Paginaci√≥n (25 elementos por p√°gina)
- Ordenamiento personalizado
- Campos calculados (edad, contadores)

üé® VISUALIZACI√ìN:
- Colores indicativos en estados
- Iconos de aprobado/reprobado
- Formato de moneda
- Agrupaci√≥n por fechas

üìù FORMULARIOS:
- Campos organizados en secciones
- Raw ID fields para mejor rendimiento
- Campos colapsables

üîç B√öSQUEDAS Y FILTROS:
- Por roles, estados, fechas
- B√∫squeda por nombre, email, matr√≠cula
- Filtros jer√°rquicos de fecha

========================================
PERSONALIZACI√ìN ADICIONAL
========================================

üéØ T√çTULOS PERSONALIZADOS:
- Header: "CRM Universitario - Administraci√≥n"
- T√≠tulo: "CRM Universitario"
- √çndice: "Panel de Administraci√≥n del Sistema CRM"

üìà CAMPOS CALCULADOS:
- Edad de usuarios
- Contador de clases por docente
- Contador de inscripciones
- Cupo disponible con colores
- Estado de aprobaci√≥n de calificaciones

üé® INDICADORES VISUALES:
- Verde: Estados positivos/disponibles
- Naranja: Advertencias/pendientes
- Rojo: Problemas/lleno/reprobado
- Azul: Estados especiales

========================================
RESOLUCI√ìN DE PROBLEMAS COMUNES
========================================

‚ùå ERROR: "la relaci√≥n ya existe"
‚úÖ SOLUCI√ìN: Usar --fake en migraciones

‚ùå ERROR: "No module named AppCRM"
‚úÖ SOLUCI√ìN: Verificar INSTALLED_APPS en settings.py

‚ùå ERROR: "relation does not exist"
‚úÖ SOLUCI√ìN: Ejecutar migrate sin --fake

‚ùå ERROR: Admin no muestra modelos
‚úÖ SOLUCI√ìN: Verificar que admin.py est√© importando correctly

========================================
COMANDOS DE REFERENCIA R√ÅPIDA
========================================

# Crear migraciones
python manage.py makemigrations

# Aplicar migraciones (normal)
python manage.py migrate

# Aplicar migraciones (fake - tablas existentes)
python manage.py migrate --fake

# Ver estado de migraciones
python manage.py showmigrations

# Crear superusuario
python manage.py createsuperuser

# Iniciar servidor
python manage.py runserver

# Acceder al shell de Django
python manage.py shell

========================================
NOTAS IMPORTANTES
========================================

1. ‚ö†Ô∏è Siempre hacer backup de la base de datos antes de cambios
2. üîß Los modelos deben tener managed = True para ser manejados por Django
3. üì± El admin es responsivo y funciona en m√≥viles
4. üîê Solo superusuarios pueden acceder al admin completo
5. üéØ Cada modelo tiene su configuraci√≥n espec√≠fica optimizada

========================================
AUTOR: Configuraci√≥n Django Admin CRM
FECHA: 2025-01-23
VERSION: 1.0
========================================
